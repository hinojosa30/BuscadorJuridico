// sw.js
// Versión del caché, cámbiala cuando actualices los recursos
const CACHE_NAME = 'buscador-juridico-v1';
const urlsToCache = [
  '/',
  '/index.html',
  '/icon-192.png',
  '/icon-512.png',
  '/materias/BDDpenal.json',
  '/materias/BDDCodigoNPCyF.json',
  '/materias/BDDLeyDelSeguroSocial.json',
  '/materias/BDDLeyFederalDeDerechosCont.json',
  '/materias/BDDLeyFederalDelTrab.json',
  '/materias/BDDLeyISR.json',
  '/materias/BDDLIVA.json',
  '/materias/BDDCodigoFiscal.json'
];

// Instalación del Service Worker: cachea los recursos iniciales
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Cache abierto:', CACHE_NAME);
        return cache.addAll(urlsToCache);
      })
      .catch(error => {
        console.error('Error al cachear recursos:', error);
      })
  );
  self.skipWaiting();
});

// Activación del Service Worker: limpia cachés antiguos
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('Eliminando caché antiguo:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// Interceptar solicitudes de red: sirve desde caché o red
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request)
          .then(networkResponse => {
            if (event.request.url.includes('/materias/')) {
              return caches.open(CACHE_NAME).then(cache => {
                cache.put(event.request, networkResponse.clone());
                return networkResponse;
              });
            }
            return networkResponse;
          })
          .catch(() => {
            return new Response('Sin conexión. Por favor, verifica tu red.', {
              status: 503,
              statusText: 'Service Unavailable'
            });
          });
      })
  );
});